// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

contract MultiSig {
    address[] public owners; // owners of the wallet
    uint256 public required; // number of confirmations required for a transaction

    // Transaction struct - iÅŸlem bilgilerini tutar
    struct Transaction {
        address destination; // Ä°ÅŸlemin gÃ¶nderileceÄŸi adres
        uint256 value; // GÃ¶nderilecek ETH miktarÄ± (wei cinsinden)
        bool executed; // Ä°ÅŸlem Ã§alÄ±ÅŸtÄ±rÄ±ldÄ± mÄ±?
        bytes data; // ğŸ†• GÃ¶nderilecek calldata
    }

    // Transaction storage - tÃ¼m iÅŸlemleri tutar
    Transaction[] public transactions;

    // Confirmations mapping - nested mapping
    // Transaction ID -> Owner Address -> Confirmed (true/false)
    mapping(uint256 => mapping(address => bool)) public confirmations;

    constructor(address[] memory _owners, uint256 _required) {
        // Error Handling 1: HiÃ§ owner yoksa hata ver
        require(_owners.length > 0, "No owner addresses provided");

        // Error Handling 2: Required confirmations sÄ±fÄ±r olamaz
        require(
            _required > 0,
            "Required confirmations must be greater than zero"
        );

        // Error Handling 3: Required confirmations owner sayÄ±sÄ±ndan fazla olamaz
        require(
            _required <= _owners.length,
            "Required confirmations cannot exceed number of owners"
        );

        owners = _owners; // set the owners
        required = _required; // set the required confirmations
    }

    // ğŸ’¸ Receive Function - ETH kabul etmek iÃ§in
    receive() external payable {
        // ETH'yi kabul et - herhangi bir logic gerekmez
        // Contract otomatik olarak ETH'yi balance'a ekler
    }

    // Transaction count - toplam iÅŸlem sayÄ±sÄ±nÄ± dÃ¶ndÃ¼rÃ¼r
    function transactionCount() public view returns (uint256) {
        return transactions.length;
    }

    // Add Transaction - yeni iÅŸlem ekler (artÄ±k internal) - ğŸ†• calldata parametresi eklendi
    function addTransaction(
        address destination,
        uint256 value,
        bytes memory data
    ) internal returns (uint256) {
        // Yeni transaction struct oluÅŸtur
        Transaction memory newTransaction = Transaction({
            destination: destination,
            value: value,
            executed: false, // VarsayÄ±lan olarak false
            data: data // ğŸ†• Calldata'yÄ± ekle
        });

        // Transaction'Ä± storage'a ekle
        transactions.push(newTransaction);

        // Transaction ID'yi dÃ¶ndÃ¼r (zero-based: 0, 1, 2, ...)
        return transactions.length - 1;
    }

    // Submit Transaction - transaction oluÅŸtur ve hemen onayà¤²à¤¾ - ğŸ†• calldata parametresi eklendi
    function submitTransaction(
        address destination,
        uint256 value,
        bytes memory data
    ) external {
        // ğŸ”’ GÃœVENLÄ°K KONTROLÃœ: Sadece owner'lar submit edebilir
        require(isOwner(msg.sender), "Only owners can submit transactions");

        // 1. Transaction oluÅŸtur (calldata ile)
        uint256 transactionId = addTransaction(destination, value, data);

        // 2. Hemen onayà¤²à¤¾ (gas tasarrufu)
        confirmTransaction(transactionId);
    }

    // Confirm Transaction - transaction'Ä± onaylar VE gerekirse otomatik execute eder
    function confirmTransaction(uint256 transactionId) public {
        // ğŸ”’ GÃœVENLÄ°K KONTROLÃœ: Sadece owner'lar onaylayabilir
        require(isOwner(msg.sender), "Only owners can confirm transactions");

        // Transaction var mÄ± kontrol et
        require(
            transactionId < transactions.length,
            "Transaction does not exist"
        );

        // Daha Ã¶nce onaylanmamÄ±ÅŸ olmalÄ±
        require(
            !confirmations[transactionId][msg.sender],
            "Transaction already confirmed by this owner"
        );

        // OnayÄ± kaydet
        confirmations[transactionId][msg.sender] = true;

        // ğŸš€ IMMEDIATE EXECUTION: Yeterli onaya ulaÅŸtÄ±ysa otomatik execute et
        if (isConfirmed(transactionId)) {
            executeTransaction(transactionId);
        }
    }

    // Execute Transaction - onaylanmÄ±ÅŸ transaction'Ä± Ã§alÄ±ÅŸtÄ±rÄ±r - ğŸ†• calldata desteÄŸi eklendi
    function executeTransaction(uint256 transactionId) public {
        // Transaction var mÄ± kontrol et
        require(
            transactionId < transactions.length,
            "Transaction does not exist"
        );

        // Transaction onaylanmÄ±ÅŸ olmalÄ±
        require(isConfirmed(transactionId), "Transaction not confirmed");

        // Transaction daha Ã¶nce Ã§alÄ±ÅŸtÄ±rÄ±lmamÄ±ÅŸ olmalÄ±
        require(
            !transactions[transactionId].executed,
            "Transaction already executed"
        );

        // Transaction bilgilerini al
        Transaction storage transaction = transactions[transactionId];

        // ğŸ†• ETH ve calldata'yÄ± destination'a gÃ¶nder
        (bool success, ) = transaction.destination.call{
            value: transaction.value
        }(transaction.data);
        require(success, "Transaction failed");

        // Transaction'Ä± executed olarak iÅŸaretle
        transaction.executed = true;
    }

    // Get Confirmations Count - transaction'Ä±n onay sayÄ±sÄ±nÄ± dÃ¶ndÃ¼rÃ¼r
    function getConfirmationsCount(
        uint256 transactionId
    ) public view returns (uint256) {
        require(
            transactionId < transactions.length,
            "Transaction does not exist"
        );

        uint256 count = 0;

        // TÃ¼m owner'larÄ± kontrol et
        for (uint256 i = 0; i < owners.length; i++) {
            if (confirmations[transactionId][owners[i]]) {
                count++;
            }
        }

        return count;
    }

    // Is Confirmed - transaction'Ä±n onaylanÄ±p onaylanmadÄ±ÄŸÄ±nÄ± kontrol eder
    function isConfirmed(uint256 transactionId) public view returns (bool) {
        // Transaction var mÄ± kontrol et
        require(
            transactionId < transactions.length,
            "Transaction does not exist"
        );

        // Mevcut helper function'Ä± kullan
        return getConfirmationsCount(transactionId) >= required;
    }

    // Helper function - address'in owner olup olmadÄ±ÄŸÄ±nÄ± kontrol eder
    function isOwner(address addr) private view returns (bool) {
        for (uint256 i = 0; i < owners.length; i++) {
            if (owners[i] == addr) {
                return true;
            }
        }
        return false;
    }
}
